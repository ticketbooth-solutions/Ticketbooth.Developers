<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Ticketbooth</name>
    </assembly>
    <members>
        <member name="T:TicketContract_1_0_0">
            <summary>
            A Stratis smart contract for running ticket sales (Ticketbooth v1.0.0)
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.MAX_SEATS">
            <summary>
            Maximum number of seats, necessary while construction cost is lower than cost to begin a sale
            </summary>
        </member>
        <member name="M:TicketContract_1_0_0.#ctor(Stratis.SmartContracts.ISmartContractState,System.Byte[],System.String)">
            <summary>
            Creates a new ticketing contract
            </summary>
            <param name="smartContractState"></param>
            <param name="seatsBytes">The serialized array of seats</param>
            <param name="venueName">The venue that hosts the contract</param>
        </member>
        <member name="P:TicketContract_1_0_0.Tickets">
            <summary>
            Stores ticket data for the contract
            </summary>
        </member>
        <member name="M:TicketContract_1_0_0.BeginSale(System.Byte[],System.String,System.String,System.UInt64,System.UInt64)">
            <summary>
            Starts a ticket sale, when no sale is running
            </summary>
            <param name="ticketsBytes">The serialized array of tickets</param>
            <param name="showName">Name of the event or performance</param>
            <param name="organiser">The organiser or artist</param>
            <param name="time">Unix time for the event</param>
            <param name="endOfSale">The block at which the sale ends</param>
        </member>
        <member name="M:TicketContract_1_0_0.EndSale">
            <summary>
            Called after the ending of a ticket sale to clear the contract ticket data
            </summary>
        </member>
        <member name="M:TicketContract_1_0_0.CheckAvailability(System.Byte[])">
            <summary>
            Checks the availability of a seat
            </summary>
            <param name="seatIdentifierBytes">The serialized seat identifier</param>
            <returns>Whether the seat is available</returns>
        </member>
        <member name="M:TicketContract_1_0_0.Reserve(System.Byte[],System.Byte[])">
            <summary>
            Reserves a ticket for the callers address
            </summary>
            <param name="seatIdentifierBytes">The serialized seat identifier</param>
            <param name="secret">The encrypted secret holding ticket ownership</param>
            <returns>Whether the seat was successfully reserved</returns>
        </member>
        <member name="M:TicketContract_1_0_0.Reserve(System.Byte[],System.Byte[],System.Byte[])">
            <summary>
            Reserves a ticket for the callers address and with an identifier for the customer
            </summary>
            <param name="seatIdentifierBytes">The serialized seat identifier</param>
            <param name="secret">The encrypted secret holding ticket ownership</param>
            <param name="customerIdentifier">An encrypted verifiable identifier for the customer</param>
            <returns>Whether the seat was successfully reserved</returns>
        </member>
        <member name="M:TicketContract_1_0_0.SetTicketReleaseFee(System.UInt64)">
            <summary>
            Sets the fee to refund a ticket to the contract
            </summary>
            <param name="releaseFee">The refund fee</param>
        </member>
        <member name="M:TicketContract_1_0_0.SetNoReleaseBlocks(System.UInt64)">
            <summary>
            Sets the block limit for issuing refunds on purchased tickets
            </summary>
            <param name="noReleaseBlocks">The number of blocks before the end of the contract to disallow refunds</param>
        </member>
        <member name="M:TicketContract_1_0_0.SetIdentityVerificationPolicy(System.Boolean)">
            <summary>
            Sets the identity verification policy of the venue
            </summary>
            <param name="requireIdentityVerification">Whether the venue requires identity verification</param>
        </member>
        <member name="M:TicketContract_1_0_0.ReleaseTicket(System.Byte[])">
            <summary>
            Requests a refund for a ticket, which will be issued if the no refund block limit is not yet reached
            </summary>
            <param name="seatIdentifierBytes">The serialized seat identifier</param>
        </member>
        <member name="T:TicketContract_1_0_0.Seat">
            <summary>
            Identifies a specific seat by number and/or letter
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Seat.Number">
            <summary>
            A number identifying the seat
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Seat.Letter">
            <summary>
            A letter identifying the seat
            </summary>
        </member>
        <member name="T:TicketContract_1_0_0.Ticket">
            <summary>
            Represents a ticket for a specific seat
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Ticket.Seat">
            <summary>
            The seat the ticket is for
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Ticket.Price">
            <summary>
            Price of the ticket in CRS sats
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Ticket.Address">
            <summary>
            The ticket owner
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Ticket.Secret">
            <summary>
            The encrypted ticket secret
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Ticket.CustomerIdentifier">
            <summary>
            Encrypted identifier used by the venue to check identity
            </summary>
        </member>
        <member name="T:TicketContract_1_0_0.Venue">
            <summary>
            Represents the venue or the event organiser
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Venue.Name">
            <summary>
            Name of the venue
            </summary>
        </member>
        <member name="T:TicketContract_1_0_0.Show">
            <summary>
            Stores metadata relating to a specific ticket sale
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Show.Name">
            <summary>
            Name of the show
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Show.Organiser">
            <summary>
            Organiser of the show
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Show.Time">
            <summary>
            Unix time (seconds) of the show
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.Show.EndOfSale">
            <summary>
            Block height at which the sale ends
            </summary>
        </member>
        <member name="T:TicketContract_1_0_0.TicketReleaseFee">
            <summary>
            Represents the fee that is charged if a ticket is released from an address
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.TicketReleaseFee.Amount">
            <summary>
            The release fee, in sats
            </summary>
        </member>
        <member name="T:TicketContract_1_0_0.NoRefundBlocks">
            <summary>
            Represents the number of blocks before the end of the contract, where refunds are not allowed
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.NoRefundBlocks.Count">
            <summary>
            The number of no refund blocks
            </summary>
        </member>
        <member name="T:TicketContract_1_0_0.IdentityVerificationPolicy">
            <summary>
            Represents the identity verification policy of the venue
            </summary>
        </member>
        <member name="F:TicketContract_1_0_0.IdentityVerificationPolicy.RequireIdentityVerification">
            <summary>
            Whether the venue requires identity verification
            </summary>
        </member>
    </members>
</doc>
